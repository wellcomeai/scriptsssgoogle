// ============================================
// ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –û–§–û–†–ú–õ–ï–ù–ò–Ø
// ============================================

const SETTINGS = {
  ROW_HEIGHT: 120,      // –í—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
  COLUMN_WIDTH: 350,    // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
  PHONE_COLUMN_WIDTH: 150  // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏
};

// ============================================
// üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–ë–û–†–ê –î–ò–ê–õ–û–ì–û–í
// ============================================

function —Å–æ–±—Ä–∞—Ç—å–î–∏–∞–ª–æ–≥–∏() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sourceSheet = ss.getSheets()[0]; // –ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç —Å –ª–æ–≥–∞–º–∏
    
    Logger.log('–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const lastRow = sourceSheet.getLastRow();
    if (lastRow < 2) {
      Logger.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
    const lastCol = sourceSheet.getLastColumn();
    Logger.log('–ö–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ' + lastCol);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ G –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (lastCol < 7) {
      sourceSheet.getRange(1, 7).setValue('–°—Ç–∞—Ç—É—Å');
      sourceSheet.getRange(1, 7).setFontWeight('bold');
    }
    
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const colsToRead = Math.max(6, lastCol);
    const dataRange = sourceSheet.getRange(2, 1, lastRow - 1, Math.min(colsToRead, 7));
    const data = dataRange.getValues();
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥–∏ –ø–æ ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    const conversations = {};
    const rowsToMark = [];
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      const rowNum = i + 2;
      
      const timestamp = row[0]; // A
      const userPhrase = row[1]; // B
      const botPhrase = row[2]; // C
      const conversationId = row[4]; // E
      const phoneData = row[5]; // F
      const status = row.length >= 7 ? row[6] : ''; // G
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (status === '–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' || status === 'processed') {
        continue;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ ID –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      if (!conversationId || !phoneData || conversationId.toString().trim() === '' || phoneData.toString().trim() === '') {
        continue;
      }
      
      const convId = conversationId.toString().trim();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      if (!conversations[convId]) {
        const phoneStr = phoneData.toString();
        let callType = 'unknown';
        let phoneNumber = '';
        
        if (phoneStr.includes('INBOUND:')) {
          callType = 'incoming';
          phoneNumber = phoneStr.replace('INBOUND:', '').trim();
        } else if (phoneStr.includes('OUTBOUND:')) {
          callType = 'outgoing';
          phoneNumber = phoneStr.replace('OUTBOUND:', '').trim();
        } else {
          phoneNumber = phoneStr.trim();
          callType = 'incoming';
        }
        
        phoneNumber = phoneNumber.replace('+', '');
        
        if (phoneNumber === '') continue;
        
        conversations[convId] = {
          date: timestamp,
          phone: phoneNumber,
          type: callType,
          messages: [],
          rows: []
        };
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      if (userPhrase && userPhrase.toString().trim() !== '') {
        conversations[convId].messages.push({
          type: 'client',
          text: userPhrase.toString().trim()
        });
      }
      
      if (botPhrase && botPhrase.toString().trim() !== '') {
        conversations[convId].messages.push({
          type: 'bot',
          text: botPhrase.toString().trim()
        });
      }
      
      conversations[convId].rows.push(rowNum);
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    let processedCount = 0;
    
    for (let convId in conversations) {
      const conv = conversations[convId];
      
      if (conv.messages.length === 0) continue;
      if (conv.type === 'unknown') continue;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –ª–∏—Å—Ç
      const targetSheetName = conv.type === 'incoming' ? '–í—Ö–æ–¥—è—â–∏–µ' : '–ò—Å—Ö–æ–¥—è—â–∏–µ';
      let targetSheet = ss.getSheetByName(targetSheetName);
      
      if (!targetSheet) {
        targetSheet = createAndFormatCRMSheet(ss, targetSheetName);
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
      processDialogToSheet(targetSheet, conv);
      
      // –ü–æ–º–µ—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      rowsToMark.push(...conv.rows);
      processedCount++;
    }
    
    // –ü–æ–º–µ—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (rowsToMark.length > 0) {
      for (let rowNum of rowsToMark) {
        sourceSheet.getRange(rowNum, 7).setValue('–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
        sourceSheet.getRange(rowNum, 7).setBackground('#9e9e9e'); // –°–µ—Ä—ã–π —Ü–≤–µ—Ç
      }
      
      Logger.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${processedCount}`);
    } else {
      Logger.log('–ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
    
  } catch (error) {
    Logger.log('–û–®–ò–ë–ö–ê: ' + error.toString());
    Logger.log('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ' + error.stack);
  }
}

// ============================================
// üìù –û–ë–†–ê–ë–û–¢–ö–ê –î–ò–ê–õ–û–ì–ê –ò –ó–ê–ü–ò–°–¨ –í –õ–ò–°–¢
// ============================================

function processDialogToSheet(sheet, conversation) {
  const phone = conversation.phone;
  const dialogDate = conversation.date;
  const messages = conversation.messages;
  
  // –°–æ–∑–¥–∞—ë–º –ü–û–õ–ù–´–ô –¥–∏–∞–ª–æ–≥
  const fullDialogText = createFullDialogWithIndicator(dialogDate, messages);
  
  // –ò—â–µ–º –Ω–æ–º–µ—Ä –≤ –∫–æ–ª–æ–Ω–∫–µ A (–Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ 2)
  const lastRow = sheet.getLastRow();
  let phoneRow = -1;
  
  // –°–∫–∞–Ω–∏—Ä—É–µ–º —Å –ø–µ—Ä–≤–æ–π —Å–≤–æ–±–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —à–∞–ø–∫–∏
  if (lastRow >= 2) {
    const phoneColumn = sheet.getRange(2, 1, lastRow - 1, 1).getValues();
    for (let i = 0; i < phoneColumn.length; i++) {
      if (phoneColumn[i][0].toString() === phone) {
        phoneRow = i + 2;
        break;
      }
    }
  }
  
  if (phoneRow === -1) {
    // –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É (–Ω–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—Ç—Ä–æ–∫–∏ 2)
    const newRow = Math.max(2, lastRow + 1);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä
    sheet.getRange(newRow, 1).setValue(phone);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ü–û–õ–ù–´–ô –¥–∏–∞–ª–æ–≥ –≤ –∫–æ–ª–æ–Ω–∫—É B
    sheet.getRange(newRow, 2).setRichTextValue(fullDialogText);
    sheet.getRange(newRow, 2).setWrap(true).setVerticalAlignment('top');
    
    // –°–æ–∑–¥–∞—ë–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ B –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å
    updateColumnHeaders(sheet, 2);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ (–∫–∞—Ä—Ç–æ—á–Ω—ã–π —Å—Ç–∏–ª—å + 180px + –°–ï–†–ê–Ø —Ä–∞–º–∫–∞)
    formatCRMRow(sheet, newRow);
    
  } else {
    // –ù–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω - —á–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∏–∞–ª–æ–≥–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const existingDialogs = [];
    
    const maxCols = Math.min(50, sheet.getMaxColumns() - 1);
    const rowData = sheet.getRange(phoneRow, 2, 1, maxCols).getRichTextValues()[0];
    
    for (let col = 0; col < rowData.length; col++) {
      const cellValue = rowData[col];
      if (cellValue && cellValue.getText().trim() !== '') {
        const cellText = cellValue.getText();
        const dateMatch = extractDateFromDialog(cellText);
        
        existingDialogs.push({
          date: dateMatch,
          richText: cellValue,
          column: col + 2
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∏–∞–ª–æ–≥ —Å —Ç–æ–π –∂–µ –¥–∞—Ç–æ–π
    const sameDate = dialogDate instanceof Date ? dialogDate : new Date(dialogDate);
    let mergeIndex = -1;
    
    for (let i = 0; i < existingDialogs.length; i++) {
      const existDate = existingDialogs[i].date;
      if (datesAreEqual(existDate, sameDate)) {
        mergeIndex = i;
        break;
      }
    }
    
    if (mergeIndex !== -1) {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∏–∞–ª–æ–≥–æ–º
      const mergedText = mergeDialogs(existingDialogs[mergeIndex].richText, fullDialogText);
      sheet.getRange(phoneRow, existingDialogs[mergeIndex].column).setRichTextValue(mergedText);
      
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
      existingDialogs.push({
        date: sameDate,
        richText: fullDialogText,
        column: -1
      });
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      existingDialogs.sort((a, b) => {
        const dateA = a.date instanceof Date ? a.date : new Date(a.date);
        const dateB = b.date instanceof Date ? b.date : new Date(b.date);
        return dateA - dateB;
      });
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (existingDialogs.length > 0) {
        sheet.getRange(phoneRow, 2, 1, existingDialogs.length).clearContent();
      }
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
      for (let i = 0; i < existingDialogs.length; i++) {
        const col = i + 2;
        sheet.getRange(phoneRow, col).setRichTextValue(existingDialogs[i].richText);
        sheet.getRange(phoneRow, col).setWrap(true).setVerticalAlignment('top');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
        updateColumnHeaders(sheet, col);
      }
    }
  }
}

// ============================================
// üí¨ –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –î–ò–ê–õ–û–ì–ê
// ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø –í–°–ï–ì–î–ê
// ============================================

function createFullDialogWithIndicator(date, messages) {
  const formattedDate = Utilities.formatDate(
    date instanceof Date ? date : new Date(date), 
    Session.getScriptTimeZone(), 
    'dd.MM.yyyy'
  );
  
  const formattedTime = Utilities.formatDate(
    date instanceof Date ? date : new Date(date), 
    Session.getScriptTimeZone(), 
    'HH:mm'
  );
  
  // –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç - –Ω–∞—á–∏–Ω–∞–µ–º —Å —à–∞–ø–∫–∏
  let dialogText = `üìÖ ${formattedDate} | üïê ${formattedTime}\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  for (let msg of messages) {
    dialogText += —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å–°–æ–æ–±—â–µ–Ω–∏–µ(msg);
  }
  
  // –°–æ–∑–¥–∞—ë–º RichText —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const richTextBuilder = SpreadsheetApp.newRichTextValue().setText(dialogText);
  
  const lines = dialogText.split('\n');
  let currentPos = 0;
  
  for (let line of lines) {
    if (line.startsWith('üìÖ')) {
      // –®–∞–ø–∫–∞ - –∂–∏—Ä–Ω—ã–π —Å–∏–Ω–∏–π
      richTextBuilder.setTextStyle(currentPos, currentPos + line.length,
        SpreadsheetApp.newTextStyle()
          .setBold(true)
          .setForegroundColor('#1a73e8')
          .setFontSize(10)
          .build()
      );
    } else if (line.startsWith('üë§ –ö–ª–∏–µ–Ω—Ç:')) {
      // –ö–ª–∏–µ–Ω—Ç - –∫—Ä–∞—Å–Ω—ã–π –∂–∏—Ä–Ω—ã–π –¥–ª—è –º–µ—Ç–∫–∏
      richTextBuilder.setTextStyle(currentPos, currentPos + 10,
        SpreadsheetApp.newTextStyle()
          .setBold(true)
          .setForegroundColor('#ea4335')
          .setFontSize(10)
          .build()
      );
      richTextBuilder.setTextStyle(currentPos + 10, currentPos + line.length,
        SpreadsheetApp.newTextStyle()
          .setBold(false)
          .setForegroundColor('#444444')
          .setFontSize(10)
          .build()
      );
    } else if (line.startsWith('ü§ñ –ë–æ—Ç:')) {
      // –ë–æ—Ç - –∑–µ–ª–µ–Ω—ã–π –∂–∏—Ä–Ω—ã–π –¥–ª—è –º–µ—Ç–∫–∏
      richTextBuilder.setTextStyle(currentPos, currentPos + 7,
        SpreadsheetApp.newTextStyle()
          .setBold(true)
          .setForegroundColor('#34a853')
          .setFontSize(10)
          .build()
      );
      richTextBuilder.setTextStyle(currentPos + 7, currentPos + line.length,
        SpreadsheetApp.newTextStyle()
          .setBold(false)
          .setForegroundColor('#555555')
          .setFontSize(10)
          .build()
      );
    }
    currentPos += line.length + 1;
  }
  
  return richTextBuilder.build();
}

// ============================================
// üìù –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –û–î–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
// ============================================

function —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å–°–æ–æ–±—â–µ–Ω–∏–µ(msg) {
  if (msg.type === 'client') {
    return `üë§ –ö–ª–∏–µ–Ω—Ç: ${msg.text}\n\n`;
  } else if (msg.type === 'bot') {
    return `ü§ñ –ë–æ—Ç: ${msg.text}\n\n`;
  }
  return '';
}

// ============================================
// üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –î–ò–ê–õ–û–ì–û–í
// ============================================

function updateColumnHeaders(sheet, col) {
  sheet.getRange(1, col).setValue('üí¨ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤');
  
  sheet.getRange(1, col)
    .setBackground('#e8eaed')
    .setFontColor('#000000')
    .setFontWeight('bold')
    .setFontSize(11)
    .setHorizontalAlignment('center')
    .setVerticalAlignment('middle');
}

function extractDateFromDialog(text) {
  const lines = text.split('\n');
  if (lines.length > 0) {
    const firstLine = lines[0];
    const datePattern = /(\d{2})\.(\d{2})\.(\d{4})\s+.*?(\d{2}):(\d{2})/;
    const match = firstLine.match(datePattern);
    
    if (match) {
      const day = parseInt(match[1]);
      const month = parseInt(match[2]) - 1;
      const year = parseInt(match[3]);
      const hour = parseInt(match[4]);
      const minute = parseInt(match[5]);
      
      return new Date(year, month, day, hour, minute);
    }
  }
  return new Date();
}

function datesAreEqual(date1, date2) {
  if (!(date1 instanceof Date) || !(date2 instanceof Date)) return false;
  
  return date1.getFullYear() === date2.getFullYear() &&
         date1.getMonth() === date2.getMonth() &&
         date1.getDate() === date2.getDate() &&
         date1.getHours() === date2.getHours() &&
         date1.getMinutes() === date2.getMinutes();
}

function mergeDialogs(existingRichText, newRichText) {
  const existingText = existingRichText.getText();
  const newText = newRichText.getText();
  
  const mergedText = existingText + '\n\n' + newText;
  
  return SpreadsheetApp.newRichTextValue()
    .setText(mergedText)
    .build();
}

// ============================================
// üé® –°–û–ó–î–ê–ù–ò–ï –ò –û–§–û–†–ú–õ–ï–ù–ò–ï –õ–ò–°–¢–ê CRM
// ============================================

function createAndFormatCRMSheet(ss, sheetName) {
  const sheet = ss.insertSheet(sheetName);
  
  // –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  const currentMaxCols = sheet.getMaxColumns();
  if (currentMaxCols < 50) {
    sheet.insertColumnsAfter(currentMaxCols, 50 - currentMaxCols);
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
  sheet.setColumnWidth(1, SETTINGS.PHONE_COLUMN_WIDTH);
  const maxColsToFormat = Math.min(50, sheet.getMaxColumns());
  for (let i = 2; i <= maxColsToFormat; i++) {
    sheet.setColumnWidth(i, SETTINGS.COLUMN_WIDTH);
  }
  
  // –°–æ–∑–¥–∞—ë–º –∫—Ä–∞—Å–∏–≤—É—é —à–∞–ø–∫—É
  sheet.getRange('A1').setValue('üìû –¢–µ–ª–µ—Ñ–æ–Ω');
  sheet.getRange('B1').setValue('üí¨ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤');
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —à–∞–ø–∫—É (–°–í–ï–¢–õ–û-–°–ï–†–´–ô + –ß–ï–†–ù–´–ô –¢–ï–ö–°–¢)
  sheet.getRange('A1:B1')
    .setBackground('#e8eaed')  // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –Ω–∞—Ç–∏–≤–Ω—ã–π
    .setFontColor('#000000')   // –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    .setFontWeight('bold')
    .setFontSize(11)
    .setHorizontalAlignment('center')
    .setVerticalAlignment('middle');
  
  sheet.setRowHeight(1, 40);
  
  // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º
  sheet.setFrozenRows(1);
  sheet.setFrozenColumns(1);
  
  Logger.log(`–°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç: ${sheetName}`);
  return sheet;
}

// ============================================
// üé® –ö–ê–†–¢–û–ß–ù–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–û–ö–ò (180px)
// ============================================

function formatCRMRow(sheet, rowNum) {
  // –ö–æ–ª–æ–Ω–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  sheet.getRange(rowNum, 1)
    .setBackground('#f8f9fa')
    .setFontWeight('bold')
    .setFontSize(10)
    .setHorizontalAlignment('center')
    .setVerticalAlignment('middle')
    .setBorder(true, true, true, true, null, null, '#d0d0d0', SpreadsheetApp.BorderStyle.SOLID_MEDIUM);
  
  // –ï–î–ò–ù–´–ô –§–û–ù –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  const cardBackground = '#ffffff';
  
  // –í–°–ï –†–ê–ú–ö–ò –°–ï–†–´–ï –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
  const defaultBorderColor = '#9e9e9e';
  
  const maxCols = Math.min(50, sheet.getMaxColumns());
  
  if (maxCols > 1) {
    sheet.getRange(rowNum, 2, 1, maxCols - 1)
      .setBackground(cardBackground)
      .setBorder(
        true, true, true, true, true, true, 
        defaultBorderColor, 
        SpreadsheetApp.BorderStyle.SOLID_THICK  // –ñ–ò–†–ù–´–ï –ì–†–ê–ù–ò–¶–´ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
      );
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏ 180px
  sheet.setRowHeight(rowNum, SETTINGS.ROW_HEIGHT);
}

// ============================================
// üé® –û–ë–ù–û–í–õ–ï–ù–ò–ï –¶–í–ï–¢–ê –†–ê–ú–ö–ò –ü–û –°–¢–ê–¢–£–°–£ AI
// ============================================

function updateCellBorderByStatus(sheet, row, col, aiStatus) {
  const borderColor = getBorderColorByStatus(aiStatus);
  
  sheet.getRange(row, col)
    .setBorder(
      true, true, true, true, true, true,
      borderColor,
      SpreadsheetApp.BorderStyle.SOLID_THICK
    );
  
  Logger.log(`–†–∞–º–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Ü–≤–µ—Ç: ${borderColor} –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: ${aiStatus}`);
}

// ============================================
// üé® –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¶–í–ï–¢–ê –†–ê–ú–ö–ò –ü–û –°–¢–ê–¢–£–°–£
// ============================================

function getBorderColorByStatus(status) {
  const statusLower = status.toLowerCase();
  
  if (statusLower.includes('–≥–æ—Ç–æ–≤ –∫ —Å–¥–µ–ª–∫–µ')) {
    return '#34a853'; // üü¢ –ó–µ–ª–µ–Ω—ã–π
  }
  
  if (statusLower.includes('—Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π')) {
    return '#fbbc04'; // üü° –ñ–µ–ª—Ç—ã–π
  }
  
  if (statusLower.includes('–æ—Ç–∫–∞–∑')) {
    return '#ea4335'; // üî¥ –ö—Ä–∞—Å–Ω—ã–π
  }
  
  if (statusLower.includes('–Ω–æ–≤—ã–π –ª–∏–¥')) {
    return '#4285f4'; // üîµ –°–∏–Ω–∏–π
  }
  
  return '#9e9e9e'; // –°–µ—Ä—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
}

// ============================================
// üé® –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–§–û–†–ú–õ–ï–ù–ò–Ø –í–°–ï–• –õ–ò–°–¢–û–í
// ============================================

function –æ–±–Ω–æ–≤–∏—Ç—å–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheets = ss.getSheets();
    
    for (let sheet of sheets) {
      const sheetName = sheet.getName();
      
      if (sheetName === '–í—Ö–æ–¥—è—â–∏–µ' || sheetName === '–ò—Å—Ö–æ–¥—è—â–∏–µ') {
        const lastRow = sheet.getLastRow();
        const lastCol = sheet.getLastColumn();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–ø–∫—É (–°–í–ï–¢–õ–û-–°–ï–†–´–ô + –ß–ï–†–ù–´–ô –¢–ï–ö–°–¢)
        sheet.getRange(1, 1)
          .setBackground('#e8eaed')  // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –Ω–∞—Ç–∏–≤–Ω—ã–π
          .setFontColor('#000000')   // –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
          .setFontWeight('bold')
          .setFontSize(11)
          .setHorizontalAlignment('center')
          .setVerticalAlignment('middle');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        if (lastCol >= 2) {
          for (let col = 2; col <= lastCol; col++) {
            sheet.getRange(1, col)
              .setValue('üí¨ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤')
              .setBackground('#e8eaed')  // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –Ω–∞—Ç–∏–≤–Ω—ã–π
              .setFontColor('#000000')   // –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
              .setFontWeight('bold')
              .setFontSize(11)
              .setHorizontalAlignment('center')
              .setVerticalAlignment('middle');
          }
        }
        
        sheet.setRowHeight(1, 40);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (180px –≤—ã—Å–æ—Ç–∞)
        if (lastRow > 1) {
          for (let row = 2; row <= lastRow; row++) {
            formatCRMRow(sheet, row);
          }
        }
        
        // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º
        sheet.setFrozenRows(1);
        sheet.setFrozenColumns(1);
      }
    }
    
    SpreadsheetApp.getUi().alert('‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
    
  } catch (error) {
    SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞: ' + error.toString());
  }
}

// ============================================
// ‚è∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ò–ì–ì–ï–†–ê–ú–ò –°–ë–û–†–ê
// ============================================

function —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–ê–≤—Ç–æ—Å–±–æ—Ä() {
  try {
    —É–¥–∞–ª–∏—Ç—å–ê–≤—Ç–æ—Å–±–æ—Ä();
    
    ScriptApp.newTrigger('—Å–æ–±—Ä–∞—Ç—å–î–∏–∞–ª–æ–≥–∏')
      .timeBased()
      .everyMinutes(5)
      .create();
    
    Logger.log('–ê–≤—Ç–æ—Å–±–æ—Ä –≤–∫–ª—é—á–µ–Ω (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
    onOpen(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ—Å–±–æ—Ä–∞: ' + error.toString());
  }
}

function —É–¥–∞–ª–∏—Ç—å–ê–≤—Ç–æ—Å–±–æ—Ä() {
  try {
    const triggers = ScriptApp.getProjectTriggers();
    let deletedCount = 0;
    
    for (let trigger of triggers) {
      if (trigger.getHandlerFunction() === '—Å–æ–±—Ä–∞—Ç—å–î–∏–∞–ª–æ–≥–∏') {
        ScriptApp.deleteTrigger(trigger);
        deletedCount++;
      }
    }
    
    if (deletedCount > 0) {
      Logger.log('–ê–≤—Ç–æ—Å–±–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω');
    }
    
    onOpen(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Å–±–æ—Ä–∞: ' + error.toString());
  }
}

function –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å–ê–≤—Ç–æ—Å–±–æ—Ä() {
  try {
    const triggers = ScriptApp.getProjectTriggers();
    let isActive = false;
    
    for (let trigger of triggers) {
      if (trigger.getHandlerFunction() === '—Å–æ–±—Ä–∞—Ç—å–î–∏–∞–ª–æ–≥–∏') {
        isActive = true;
        break;
      }
    }
    
    if (isActive) {
      —É–¥–∞–ª–∏—Ç—å–ê–≤—Ç–æ—Å–±–æ—Ä();
      SpreadsheetApp.getUi().alert('‚úÖ –ê–≤—Ç–æ—Å–±–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω');
    } else {
      —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–ê–≤—Ç–æ—Å–±–æ—Ä();
      SpreadsheetApp.getUi().alert('‚úÖ –ê–≤—Ç–æ—Å–±–æ—Ä –≤–∫–ª—é—á–µ–Ω!\n\n–°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.');
    }
  } catch (error) {
    SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞: ' + error.toString());
  }
}

// ============================================
// üìä –°–¢–ê–¢–£–° –¢–†–ò–ì–ì–ï–†–û–í
// ============================================

function –ø–æ–∫–∞–∑–∞—Ç—å–°—Ç–∞—Ç—É—Å–¢—Ä–∏–≥–≥–µ—Ä–æ–≤() {
  try {
    const triggers = ScriptApp.getProjectTriggers();
    let collectorActive = false;
    let analyzerActive = false;
    
    for (let trigger of triggers) {
      if (trigger.getHandlerFunction() === '—Å–æ–±—Ä–∞—Ç—å–î–∏–∞–ª–æ–≥–∏') {
        collectorActive = true;
      }
      if (trigger.getHandlerFunction() === '–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å–î–∏–∞–ª–æ–≥–∏') {
        analyzerActive = true;
      }
    }
    
    let status = 'üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ CRM\n\n';
    status += collectorActive ? '‚úÖ –ê–≤—Ç–æ—Å–±–æ—Ä–∫–∞: –í–ö–õ–Æ–ß–ï–ù–ê (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)\n' : '‚ùå –ê–≤—Ç–æ—Å–±–æ—Ä–∫–∞: –í–´–ö–õ–Æ–ß–ï–ù–ê\n';
    status += analyzerActive ? '‚úÖ AI-–ê–Ω–∞–ª–∏–∑: –í–ö–õ–Æ–ß–ï–ù (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)\n' : '‚ùå AI-–ê–Ω–∞–ª–∏–∑: –í–´–ö–õ–Æ–ß–ï–ù\n';
    
    SpreadsheetApp.getUi().alert(status);
    
  } catch (error) {
    SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞: ' + error.toString());
  }
}

// ============================================
// üîç –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò –¢–†–ò–ì–ì–ï–†–ê
// ============================================

function is–¢—Ä–∏–≥–≥–µ—ÄActive(functionName) {
  const triggers = ScriptApp.getProjectTriggers();
  return triggers.some(trigger => trigger.getHandlerFunction() === functionName);
}

// ============================================
// üéõÔ∏è –°–û–ó–î–ê–ù–ò–ï –ú–ï–ù–Æ –° –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ú–ò –ò–ù–î–ò–ö–ê–¢–û–†–ê–ú–ò
// ============================================

function onOpen() {
  try {
    const ui = SpreadsheetApp.getUi();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    const collectorStatus = is–¢—Ä–∏–≥–≥–µ—ÄActive('—Å–æ–±—Ä–∞—Ç—å–î–∏–∞–ª–æ–≥–∏') ? '‚úÖ' : '‚ùå';
    const analyzerStatus = is–¢—Ä–∏–≥–≥–µ—ÄActive('–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å–î–∏–∞–ª–æ–≥–∏') ? '‚úÖ' : '‚ùå';
    
    ui.createMenu('üéõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CRM')
        .addItem(`${collectorStatus} –ê–≤—Ç–æ—Å–±–æ—Ä–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ (5 –º–∏–Ω)`, '–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å–ê–≤—Ç–æ—Å–±–æ—Ä')
        .addItem(`${analyzerStatus} AI-–ê–Ω–∞–ª–∏–∑ (1 –º–∏–Ω)`, '–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑')
        .addSeparator()
        .addItem('‚ñ∂Ô∏è –°–æ–±—Ä–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏ –≤—Ä—É—á–Ω—É—é', '—Å–æ–±—Ä–∞—Ç—å–î–∏–∞–ª–æ–≥–∏')
        .addItem('‚ñ∂Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é', '–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å–î–∏–∞–ª–æ–≥–∏')
        .addSeparator()
        .addItem('üé® –û–±–Ω–æ–≤–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ', '–æ–±–Ω–æ–≤–∏—Ç—å–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ')
        .addItem('üß™ –¢–µ—Å—Ç Telegram', '—Ç–µ—Å—Ç–¢–µ–ª–µ–≥—Ä–∞–º')
        .addItem('üß™ –¢–µ—Å—Ç Email', '—Ç–µ—Å—ÇEmail')
        .addSeparator()
        .addItem('üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã', '–ø–æ–∫–∞–∑–∞—Ç—å–°—Ç–∞—Ç—É—Å–¢—Ä–∏–≥–≥–µ—Ä–æ–≤')
        .addToUi();
        
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é: ' + error.toString());
  }
}
