// ============================================
// ü§ñ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø API
// ============================================

const CONFIG = {
  openai: {
    apiKey: 'sk-HM7Csrh-12lBUWVopxS1r4nwbUursNdgYO48R-pGk6T3BlbkFJDjXWVqs7o3eVrq6JCxV2KW0LsRe1H9gjXXXXXX',
    apiUrl: 'https://api.openai.com/v1/chat/completions',
    model: 'gpt-4o-mini'
  },
  telegram: {
    botToken: '8372070218:AAEZrSDVJ4kqUm5QYIRtPp8b7qTGB7Mt_7Y',
    chatId: '-4109810158'
  },
  email: {
    recipient: 'kihcgnca165v24hr31av@task.yougile.com'
  },
  marker: 'ü§ñ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç –ò–ò'
};

// ============================================
// üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –î–ò–ê–õ–û–ì–û–í
// ============================================

function –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å–î–∏–∞–ª–æ–≥–∏() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheetsToProcess = ['–í—Ö–æ–¥—è—â–∏–µ', '–ò—Å—Ö–æ–¥—è—â–∏–µ'];
    
    let totalProcessed = 0;
    
    for (let sheetName of sheetsToProcess) {
      const sheet = ss.getSheetByName(sheetName);
      if (!sheet) continue;
      
      Logger.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞: ${sheetName}`);
      
      const lastRow = sheet.getLastRow();
      if (lastRow < 2) continue;
      
      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
      for (let row = 2; row <= lastRow; row++) {
        const phone = sheet.getRange(row, 1).getValue();
        if (!phone || phone.toString().trim() === '') continue;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
        const lastCol = sheet.getLastColumn();
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–æ–ª–æ–Ω–∫–∞–º —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ (–Ω–∞—á–∏–Ω–∞—è —Å B)
        for (let col = 2; col <= lastCol; col++) {
          const cell = sheet.getRange(row, col);
          const richTextValue = cell.getRichTextValue();
          
          if (!richTextValue) continue;
          
          const cellText = richTextValue.getText();
          if (cellText.trim() === '') continue;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ
          if (cellText.includes(CONFIG.marker)) {
            continue;
          }
          
          Logger.log(`–ù–∞–π–¥–µ–Ω –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥: ${sheetName}, —Å—Ç—Ä–æ–∫–∞ ${row}, –∫–æ–ª–æ–Ω–∫–∞ ${col}`);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
          const processed = –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å–û–¥–∏–Ω–î–∏–∞–ª–æ–≥(sheet, row, col, phone, cellText, richTextValue, sheetName);
          if (processed) {
            totalProcessed++;
          }
        }
      }
    }
    
    Logger.log(`–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${totalProcessed}`);
    
  } catch (error) {
    Logger.log('–û–®–ò–ë–ö–ê –≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å–î–∏–∞–ª–æ–≥–∏: ' + error.toString());
    Logger.log('–°—Ç–µ–∫: ' + error.stack);
  }
}

// ============================================
// üìù –û–ë–†–ê–ë–û–¢–ö–ê –û–î–ù–û–ì–û –î–ò–ê–õ–û–ì–ê
// ============================================

function –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å–û–¥–∏–Ω–î–∏–∞–ª–æ–≥(sheet, row, col, phone, dialogText, originalRichText, sheetType) {
  try {
    // –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    const cleanDialog = –æ—á–∏—Å—Ç–∏—Ç—å–¢–µ–∫—Å—Ç–î–∏–∞–ª–æ–≥–∞(dialogText);
    
    Logger.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenAI...`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç OpenAI
    const analysis = –æ—Ç–ø—Ä–∞–≤–∏—Ç—å–íOpenAI(cleanDialog);
    
    if (!analysis) {
      Logger.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç OpenAI');
      return false;
    }
    
    Logger.log(`–ü–æ–ª—É—á–µ–Ω –∞–Ω–∞–ª–∏–∑: ${JSON.stringify(analysis)}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
    const analysisText = —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å–ê–Ω–∞–ª–∏–∑(analysis);
    
    // ‚úÖ –°–û–ó–î–ê–ï–ú Rich Text —Å –ê–ù–ê–õ–ò–ó–û–ú –í –ù–ê–ß–ê–õ–ï
    const richText = —Å–æ–∑–¥–∞—Ç—å–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π–ê–Ω–∞–ª–∏–∑–í–ù–∞—á–∞–ª–µ(originalRichText, analysisText);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É
    sheet.getRange(row, col).setRichTextValue(richText);
    
    Logger.log('–ê–Ω–∞–ª–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É');
    
    // üé® –û–ë–ù–û–í–õ–Ø–ï–ú –¶–í–ï–¢ –†–ê–ú–ö–ò –ü–û –°–¢–ê–¢–£–°–£ AI
    updateCellBorderByStatus(sheet, row, col, analysis.status);
    
    Logger.log(`–¶–≤–µ—Ç —Ä–∞–º–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: ${analysis.status}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    –æ—Ç–ø—Ä–∞–≤–∏—Ç—å–íTelegram(phone, analysis, sheetType);
    
    Logger.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Email
    –æ—Ç–ø—Ä–∞–≤–∏—Ç—å–ù–∞Email(phone, analysis, sheetType);
    
    Logger.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ Email');
    
    return true;
    
  } catch (error) {
    Logger.log('–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞: ' + error.toString());
    return false;
  }
}

// ============================================
// üßπ –û–ß–ò–°–¢–ö–ê –¢–ï–ö–°–¢–ê –î–ò–ê–õ–û–ì–ê
// ============================================

function –æ—á–∏—Å—Ç–∏—Ç—å–¢–µ–∫—Å—Ç–î–∏–∞–ª–æ–≥–∞(text) {
  // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  let cleaned = text.replace(CONFIG.marker, '');
  
  // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  cleaned = cleaned.replace(/\n{3,}/g, '\n\n');
  
  return cleaned.trim();
}

// ============================================
// ü§ñ –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –í OPENAI
// ============================================

function –æ—Ç–ø—Ä–∞–≤–∏—Ç—å–íOpenAI(dialogText) {
  try {
    const systemPrompt = `–¢—ã –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –±–æ—Ç–æ–º/–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "city": "–≥–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ '–ù–µ —É–∫–∞–∑–∞–Ω'",
  "name": "–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ '–ù–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è'",
  "interest": "–í—ã—Å–æ–∫–∏–π|–°—Ä–µ–¥–Ω–∏–π|–ù–∏–∑–∫–∏–π",
  "status": "–ù–æ–≤—ã–π –ª–∏–¥|–¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π|–ì–æ—Ç–æ–≤ –∫ —Å–¥–µ–ª–∫–µ|–û—Ç–∫–∞–∑",
  "summary": "2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —á–µ–º –≥–æ–≤–æ—Ä–∏–ª–∏ –∏ –∫–∞–∫–∏–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
}

–ü—Ä–∞–≤–∏–ª–∞:
- –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ —É–ø–æ–º—è–Ω—É—Ç - —É–∫–∞–∂–∏ –µ–≥–æ
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è - —É–∫–∞–∂–∏ –∏–º—è
- –û—Ü–µ–Ω–∏ —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –¥–∏–∞–ª–æ–≥–∞
- –°—Ç–∞—Ç—É—Å –æ–ø—Ä–µ–¥–µ–ª–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
- –†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞`;

    const payload = {
      model: CONFIG.openai.model,
      messages: [
        {
          role: 'system',
          content: systemPrompt
        },
        {
          role: 'user',
          content: dialogText
        }
      ],
      temperature: 0.3,
      response_format: { type: 'json_object' }
    };
    
    const options = {
      method: 'post',
      contentType: 'application/json',
      headers: {
        'Authorization': 'Bearer ' + CONFIG.openai.apiKey
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    };
    
    const response = UrlFetchApp.fetch(CONFIG.openai.apiUrl, options);
    const responseCode = response.getResponseCode();
    
    if (responseCode !== 200) {
      Logger.log('OpenAI API Error: ' + responseCode);
      Logger.log('Response: ' + response.getContentText());
      return null;
    }
    
    const result = JSON.parse(response.getContentText());
    const content = result.choices[0].message.content;
    
    return JSON.parse(content);
    
  } catch (error) {
    Logger.log('–û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: ' + error.toString());
    return null;
  }
}

// ============================================
// üìä –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê –î–õ–Ø –¢–ê–ë–õ–ò–¶–´
// ============================================

function —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å–ê–Ω–∞–ª–∏–∑(analysis) {
  const divider = '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ';
  
  let text = divider + '\n';
  text += 'ü§ñ –ê–ù–ê–õ–ò–ó –û–¢ –ò–ò\n\n';
  text += `üèôÔ∏è –ì–æ—Ä–æ–¥: ${analysis.city}\n`;
  text += `üë§ –§–ò–û: ${analysis.name}\n`;
  text += `üíº –ò–Ω—Ç–µ—Ä–µ—Å: ${analysis.interest}\n`;
  text += `üìä –°—Ç–∞—Ç—É—Å: ${analysis.status}\n\n`;
  text += `üìù –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:\n${analysis.summary}\n`;
  text += divider;
  
  return text;
}

// ============================================
// üé® –°–û–ó–î–ê–ù–ò–ï RICH TEXT –° –ê–ù–ê–õ–ò–ó–û–ú –í –ù–ê–ß–ê–õ–ï
// ‚ú® –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ê–Ω–∞–ª–∏–∑ –ü–ï–†–ï–î –¥–∏–∞–ª–æ–≥–æ–º
// ============================================

function —Å–æ–∑–¥–∞—Ç—å–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π–ê–Ω–∞–ª–∏–∑–í–ù–∞—á–∞–ª–µ(originalRichText, analysisText) {
  const originalText = originalRichText.getText();
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
  const lines = originalText.split('\n');
  const dateTimeLine = lines[0]; // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –±–µ–∑ –¥–∞—Ç—ã
  const dialogWithoutDate = lines.slice(1).join('\n').trim();
  
  // ‚úÖ –ù–û–í–´–ô –ü–û–†–Ø–î–û–ö: –î–∞—Ç–∞ ‚Üí –ê–Ω–∞–ª–∏–∑ ‚Üí –î–∏–∞–ª–æ–≥ ‚Üí –ú–∞—Ä–∫–µ—Ä
  const fullText = `${dateTimeLine}\n\n${analysisText}\n\n${dialogWithoutDate}\n\n${CONFIG.marker}`;
  
  const richTextBuilder = SpreadsheetApp.newRichTextValue().setText(fullText);
  
  let currentPos = 0;
  
  // 1. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
  richTextBuilder.setTextStyle(
    0,
    dateTimeLine.length,
    SpreadsheetApp.newTextStyle()
      .setBold(true)
      .setForegroundColor('#1a73e8')
      .setFontSize(10)
      .build()
  );
  currentPos = dateTimeLine.length + 2; // +2 –¥–ª—è \n\n
  
  // 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
  const analysisStart = currentPos;
  const analysisEnd = analysisStart + analysisText.length;
  
  const analysisLines = analysisText.split('\n');
  let analysisPos = analysisStart;
  
  for (let line of analysisLines) {
    if (line.startsWith('‚îÅ')) {
      // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - —Å–µ—Ä—ã–π
      richTextBuilder.setTextStyle(
        analysisPos,
        analysisPos + line.length,
        SpreadsheetApp.newTextStyle()
          .setForegroundColor('#9e9e9e')
          .setBold(true)
          .setFontSize(10)
          .build()
      );
    } else if (line.startsWith('ü§ñ –ê–ù–ê–õ–ò–ó')) {
      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ - —Å–∏–Ω–∏–π –∂–∏—Ä–Ω—ã–π
      richTextBuilder.setTextStyle(
        analysisPos,
        analysisPos + line.length,
        SpreadsheetApp.newTextStyle()
          .setForegroundColor('#1a73e8')
          .setBold(true)
          .setFontSize(11)
          .build()
      );
    } else if (line.startsWith('üèôÔ∏è') || line.startsWith('üë§') || line.startsWith('üíº') || line.startsWith('üìä')) {
      // –ü–æ–ª—è –¥–∞–Ω–Ω—ã—Ö - –∂–∏—Ä–Ω—ã–π —ç–º–æ–¥–∑–∏ + –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
      const colonIndex = line.indexOf(':');
      if (colonIndex > 0) {
        richTextBuilder.setTextStyle(
          analysisPos,
          analysisPos + colonIndex + 1,
          SpreadsheetApp.newTextStyle()
            .setBold(true)
            .setForegroundColor('#202124')
            .setFontSize(10)
            .build()
        );
        richTextBuilder.setTextStyle(
          analysisPos + colonIndex + 1,
          analysisPos + line.length,
          SpreadsheetApp.newTextStyle()
            .setBold(false)
            .setForegroundColor('#5f6368')
            .setFontSize(10)
            .build()
        );
      }
    } else if (line.startsWith('üìù')) {
      // –†–µ–∑—é–º–µ - –∂–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
      richTextBuilder.setTextStyle(
        analysisPos,
        analysisPos + line.length,
        SpreadsheetApp.newTextStyle()
          .setBold(true)
          .setForegroundColor('#202124')
          .setFontSize(10)
          .build()
      );
    } else if (line.trim() !== '' && !line.startsWith('‚îÅ')) {
      // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
      richTextBuilder.setTextStyle(
        analysisPos,
        analysisPos + line.length,
        SpreadsheetApp.newTextStyle()
          .setBold(false)
          .setForegroundColor('#5f6368')
          .setFontSize(10)
          .build()
      );
    }
    analysisPos += line.length + 1;
  }
  
  // 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
  const dialogStart = analysisEnd + 2;
  const dialogLines = dialogWithoutDate.split('\n');
  let dialogPos = dialogStart;
  
  for (let line of dialogLines) {
    if (line.startsWith('üë§ –ö–ª–∏–µ–Ω—Ç:')) {
      // –ö–ª–∏–µ–Ω—Ç - –∫—Ä–∞—Å–Ω—ã–π –∂–∏—Ä–Ω—ã–π –¥–ª—è –º–µ—Ç–∫–∏
      richTextBuilder.setTextStyle(
        dialogPos,
        dialogPos + 10,
        SpreadsheetApp.newTextStyle()
          .setBold(true)
          .setForegroundColor('#ea4335')
          .setFontSize(10)
          .build()
      );
      richTextBuilder.setTextStyle(
        dialogPos + 10,
        dialogPos + line.length,
        SpreadsheetApp.newTextStyle()
          .setBold(false)
          .setForegroundColor('#444444')
          .setFontSize(10)
          .build()
      );
    } else if (line.startsWith('ü§ñ –ë–æ—Ç:')) {
      // –ë–æ—Ç - –∑–µ–ª–µ–Ω—ã–π –∂–∏—Ä–Ω—ã–π –¥–ª—è –º–µ—Ç–∫–∏
      richTextBuilder.setTextStyle(
        dialogPos,
        dialogPos + 7,
        SpreadsheetApp.newTextStyle()
          .setBold(true)
          .setForegroundColor('#34a853')
          .setFontSize(10)
          .build()
      );
      richTextBuilder.setTextStyle(
        dialogPos + 7,
        dialogPos + line.length,
        SpreadsheetApp.newTextStyle()
          .setBold(false)
          .setForegroundColor('#555555')
          .setFontSize(10)
          .build()
      );
    }
    dialogPos += line.length + 1;
  }
  
  // 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∑–µ–ª–µ–Ω—ã–π –∂–∏—Ä–Ω—ã–π)
  const markerStart = fullText.length - CONFIG.marker.length;
  richTextBuilder.setTextStyle(
    markerStart,
    fullText.length,
    SpreadsheetApp.newTextStyle()
      .setForegroundColor('#34a853')
      .setBold(true)
      .setFontSize(9)
      .build()
  );
  
  return richTextBuilder.build();
}

// ============================================
// üì± –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í TELEGRAM
// ============================================

function –æ—Ç–ø—Ä–∞–≤–∏—Ç—å–íTelegram(phone, analysis, sheetType) {
  try {
    const now = new Date();
    const dateStr = Utilities.formatDate(now, Session.getScriptTimeZone(), 'dd.MM.yyyy HH:mm');
    
    const callTypeEmoji = sheetType === '–í—Ö–æ–¥—è—â–∏–µ' ? 'üìû' : 'üì±';
    const callTypeText = sheetType === '–í—Ö–æ–¥—è—â–∏–µ' ? '–í—Ö–æ–¥—è—â–∏–π' : '–ò—Å—Ö–æ–¥—è—â–∏–π';
    
    let message = `üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê (${callTypeText})\n\n`;
    message += `${callTypeEmoji} –¢–µ–ª–µ—Ñ–æ–Ω: +${phone}\n`;
    message += `üèôÔ∏è –ì–æ—Ä–æ–¥: ${analysis.city}\n`;
    message += `üë§ –§–ò–û: ${analysis.name}\n`;
    message += `üíº –ò–Ω—Ç–µ—Ä–µ—Å: ${analysis.interest}\n`;
    message += `üìä –°—Ç–∞—Ç—É—Å: ${analysis.status}\n\n`;
    message += `üìù –†–µ–∑—é–º–µ:\n${analysis.summary}\n\n`;
    message += `üïê ${dateStr}`;
    
    const telegramUrl = `https://api.telegram.org/bot${CONFIG.telegram.botToken}/sendMessage`;
    
    const payload = {
      chat_id: CONFIG.telegram.chatId,
      text: message,
      parse_mode: 'HTML'
    };
    
    const options = {
      method: 'post',
      contentType: 'application/json',
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    };
    
    const response = UrlFetchApp.fetch(telegramUrl, options);
    const responseCode = response.getResponseCode();
    
    if (responseCode !== 200) {
      Logger.log('Telegram API Error: ' + responseCode);
      Logger.log('Response: ' + response.getContentText());
    } else {
      Logger.log('Telegram: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    }
    
  } catch (error) {
    Logger.log('–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: ' + error.toString());
  }
}

// ============================================
// üìß –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ù–ê EMAIL
// ============================================

function –æ—Ç–ø—Ä–∞–≤–∏—Ç—å–ù–∞Email(phone, analysis, sheetType) {
  try {
    // ‚úÖ –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –ø—É—Å—Ç–æ–π - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if (!analysis) {
      Logger.log('Email: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }
    
    const now = new Date();
    const dateStr = Utilities.formatDate(now, Session.getScriptTimeZone(), 'dd.MM.yyyy HH:mm');
    
    const callTypeText = sheetType === '–í—Ö–æ–¥—è—â–∏–µ' ? '–í—Ö–æ–¥—è—â–∏–π' : '–ò—Å—Ö–æ–¥—è—â–∏–π';
    
    // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ
    const clientName = analysis.name || '–ù–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è';
    const clientCity = analysis.city || '–ù–µ —É–∫–∞–∑–∞–Ω';
    const clientInterest = analysis.interest || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
    const clientStatus = analysis.status || '–ù–æ–≤—ã–π –ª–∏–¥';
    const clientSummary = analysis.summary || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    
    // –¢–µ–º–∞ –ø–∏—Å—å–º–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    const subject = `–ó–∞—è–≤–∫–∞ –æ—Ç ${clientName} –∏–∑ —Ñ–æ—Ä–º—ã CRM Voice AI`;
    
    // –¢–µ–ª–æ –ø–∏—Å—å–º–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
    let body = `–¢–µ–º–∞ –∑–∞—è–≤–∫–∏: –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (${callTypeText})\n\n`;
    body += `–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n`;
    body += `–§–ò–û: ${clientName}\n`;
    body += `–ì–æ—Ä–æ–¥: ${clientCity}\n`;
    body += `–ò–Ω—Ç–µ—Ä–µ—Å: ${clientInterest}\n`;
    body += `–°—Ç–∞—Ç—É—Å: ${clientStatus}\n\n`;
    body += `–†–µ–∑—é–º–µ:\n${clientSummary}\n\n`;
    body += `–¢–∏–ø –∑–≤–æ–Ω–∫–∞: ${callTypeText}\n`;
    body += `–î–∞—Ç–∞: ${dateStr}\n\n`;
    body += `---\n`;
    body += `–ò—Å—Ç–æ—á–Ω–∏–∫: chatforyou.ru`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    MailApp.sendEmail({
      to: CONFIG.email.recipient,
      subject: subject,
      body: body
    });
    
    Logger.log('Email: –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ' + CONFIG.email.recipient);
    
  } catch (error) {
    Logger.log('–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ Email: ' + error.toString());
    Logger.log('Stack: ' + error.stack);
  }
}

// ============================================
// ‚è∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ò–ì–ì–ï–†–ê–ú–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê
// ============================================

function —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑() {
  try {
    —É–¥–∞–ª–∏—Ç—å–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑();
    
    ScriptApp.newTrigger('–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å–î–∏–∞–ª–æ–≥–∏')
      .timeBased()
      .everyMinutes(1)
      .create();
    
    Logger.log('–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)');
    onOpen(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: ' + error.toString());
  }
}

function —É–¥–∞–ª–∏—Ç—å–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑() {
  try {
    const triggers = ScriptApp.getProjectTriggers();
    let deletedCount = 0;
    
    for (let trigger of triggers) {
      if (trigger.getHandlerFunction() === '–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å–î–∏–∞–ª–æ–≥–∏') {
        ScriptApp.deleteTrigger(trigger);
        deletedCount++;
      }
    }
    
    if (deletedCount > 0) {
      Logger.log('–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –≤—ã–∫–ª—é—á–µ–Ω');
    }
    
    onOpen(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: ' + error.toString());
  }
}

function –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑() {
  try {
    const triggers = ScriptApp.getProjectTriggers();
    let isActive = false;
    
    for (let trigger of triggers) {
      if (trigger.getHandlerFunction() === '–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å–î–∏–∞–ª–æ–≥–∏') {
        isActive = true;
        break;
      }
    }
    
    if (isActive) {
      —É–¥–∞–ª–∏—Ç—å–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑();
      SpreadsheetApp.getUi().alert('‚úÖ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –≤—ã–∫–ª—é—á–µ–Ω');
    } else {
      —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑();
      SpreadsheetApp.getUi().alert('‚úÖ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω!\n\n–°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.');
    }
  } catch (error) {
    SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞: ' + error.toString());
  }
}

// ============================================
// üß™ –¢–ï–°–¢ TELEGRAM
// ============================================

function —Ç–µ—Å—Ç–¢–µ–ª–µ–≥—Ä–∞–º() {
  try {
    Logger.log('–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ Telegram...');
    Logger.log('Bot Token: ' + CONFIG.telegram.botToken.substring(0, 10) + '...');
    Logger.log('Chat ID: ' + CONFIG.telegram.chatId);
    
    const telegramUrl = `https://api.telegram.org/bot${CONFIG.telegram.botToken}/sendMessage`;
    
    const payload = {
      chat_id: CONFIG.telegram.chatId,
      text: 'üß™ –¢–µ—Å—Ç —Å–≤—è–∑–∏!\n\n–ï—Å–ª–∏ –≤–∏–¥–∏—à—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ'
    };
    
    const options = {
      method: 'post',
      contentType: 'application/json',
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    };
    
    const response = UrlFetchApp.fetch(telegramUrl, options);
    const responseCode = response.getResponseCode();
    
    Logger.log('Response Code: ' + responseCode);
    Logger.log('Response: ' + response.getContentText());
    
    if (responseCode === 200) {
      SpreadsheetApp.getUi().alert('‚úÖ Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.');
    } else {
      SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞ Telegram:\n\n' + response.getContentText());
    }
    
  } catch (error) {
    Logger.log('–û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ: ' + error.toString());
    SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞: ' + error.toString());
  }
}

// ============================================
// üß™ –¢–ï–°–¢ EMAIL
// ============================================

function —Ç–µ—Å—ÇEmail() {
  try {
    Logger.log('–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ Email...');
    Logger.log('Recipient: ' + CONFIG.email.recipient);
    
    const testAnalysis = {
      city: '–ú–æ—Å–∫–≤–∞',
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç',
      interest: '–í—ã—Å–æ–∫–∏–π',
      status: '–ù–æ–≤—ã–π –ª–∏–¥',
      summary: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Yougile.'
    };
    
    –æ—Ç–ø—Ä–∞–≤–∏—Ç—å–ù–∞Email('79001234567', testAnalysis, '–í—Ö–æ–¥—è—â–∏–µ');
    
    SpreadsheetApp.getUi().alert('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ' + CONFIG.email.recipient);
    
  } catch (error) {
    Logger.log('–û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ Email: ' + error.toString());
    SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞ Email:\n\n' + error.toString());
  }
}

// ============================================
// üé® –û–ë–ù–û–í–õ–ï–ù–ò–ï –¶–í–ï–¢–ê –†–ê–ú–ö–ò –ü–û –°–¢–ê–¢–£–°–£
// ============================================

function updateCellBorderByStatus(sheet, row, col, status) {
  try {
    const cell = sheet.getRange(row, col);
    let color;
    
    switch (status) {
      case '–ù–æ–≤—ã–π –ª–∏–¥':
        color = '#4285f4'; // –°–∏–Ω–∏–π
        break;
      case '–¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π':
        color = '#fbbc04'; // –ñ–µ–ª—Ç—ã–π
        break;
      case '–ì–æ—Ç–æ–≤ –∫ —Å–¥–µ–ª–∫–µ':
        color = '#34a853'; // –ó–µ–ª–µ–Ω—ã–π
        break;
      case '–û—Ç–∫–∞–∑':
        color = '#ea4335'; // –ö—Ä–∞—Å–Ω—ã–π
        break;
      default:
        color = '#9e9e9e'; // –°–µ—Ä—ã–π
    }
    
    cell.setBorder(true, true, true, true, null, null, color, SpreadsheetApp.BorderStyle.SOLID_MEDIUM);
    
  } catch (error) {
    Logger.log('–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞ —Ä–∞–º–∫–∏: ' + error.toString());
  }
}
